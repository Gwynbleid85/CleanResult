using System.Net;
using System.Text.Json.Serialization;

namespace CleanResult;

/// <summary>
/// Structure representing an error.
/// </summary>
/// <remarks>based on rfc9457 (https://www.rfc-editor.org/rfc/rfc9457)</remarks>
public struct Error
{
    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
    /// dereferenced, it provides human-readable documentation for the problem type
    /// (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be
    /// "about:blank".
    /// </summary>
    [JsonInclude]
    [JsonPropertyOrder(-5)]
    [JsonPropertyName("type")]
    public required string Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
    /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
    /// see[RFC7231], Section 3.4).
    /// </summary>
    [JsonInclude]
    [JsonPropertyOrder(-4)]
    [JsonPropertyName("title")]
    public required string Title { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    [JsonInclude]
    [JsonPropertyOrder(-3)]
    [JsonPropertyName("status")]
    public required int Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    [JsonInclude]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-2)]
    [JsonPropertyName("detail")]
    public string? Detail { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if
    /// dereferenced.
    /// </summary>
    [JsonInclude]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-1)]
    [JsonPropertyName("instance")]
    public string? Instance { get; set; }

    /// <summary>
    /// Additional validation problems that occurred during the request processing.
    /// </summary>
    [JsonInclude]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(0)]
    [JsonPropertyName("errors")]
    public IDictionary<string, string[]>? Errors { get; set; }


    /// <summary>
    /// Creates a new error.
    /// </summary>
    /// <param name="title">A short, human-readable summary of the problem type</param>
    /// <returns>Result object representing an error</returns>
    public Error(string title)
    {
        Type = ProblemDetailsTypeMappings.GetProblemType(500);
        Title = title;
        Status = (int)HttpStatusCode.InternalServerError;
    }

    /// <summary>
    /// Creates a new error.
    /// </summary>
    /// <param name="title">A short, human-readable summary of the problem type</param>
    /// <param name="status">The HTTP status code</param>
    /// <param name="type">A URI reference that identifies the problem type</param>
    /// <param name="detail">A human-readable explanation specific to this occurrence of the problem</param>
    /// <param name="instance">A URI reference that identifies the specific occurrence of the problem</param>
    /// <param name="errors">Dictionary od additional errors</param>
    /// <returns>Result object representing an error</returns>
    public Error(string title, int status, string? type = null,
        string? detail = null, string? instance = null, IDictionary<string, string[]>? errors = null)
    {
        Type = type ?? ProblemDetailsTypeMappings.GetProblemType(status);
        Title = title;
        Status = status;
        Detail = detail;
        Instance = instance;
        Errors = errors;
    }


    /// <summary>
    /// Creates a new error.
    /// </summary>
    /// <param name="title">A short, human-readable summary of the problem type</param>
    /// <param name="status">The HTTP status code</param>
    /// <param name="type">A URI reference that identifies the problem type</param>
    /// <param name="detail">A human-readable explanation specific to this occurrence of the problem</param>
    /// <param name="instance">A URI reference that identifies the specific occurrence of the problem</param>
    /// <param name="errors">Dictionary od additional errors</param>
    /// <returns>Result object representing an error</returns>
    public Error(string title, HttpStatusCode status,
        string? type = null,
        string? detail = null, string? instance = null, IDictionary<string, string[]>? errors = null)
    {
        Type = type ?? ProblemDetailsTypeMappings.GetProblemType(500);
        Title = title;
        Status = (int)status;
        Detail = detail;
        Instance = instance;
        Errors = errors;
    }

    public Error Clone()
    {
        return this with { Errors = Errors?.ToDictionary() };
    }
}