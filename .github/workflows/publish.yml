name: Publish NuGet Packages

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # FR1: Trigger and Validation
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      tag: ${{ steps.extract-version.outputs.tag }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate tag format
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Tag '$TAG_NAME' does not follow semantic versioning format (v{major}.{minor}.{patch})"
          exit 1
        fi
        echo "Tag format validated: $TAG_NAME"

    - name: Extract version from tag
      id: extract-version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

  # FR2: Testing
  test:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore CleanResult.sln

    - name: Build solution
      run: dotnet build CleanResult.sln --configuration Release --no-restore

    - name: Run Tests project
      run: dotnet test Tests/Tests.csproj --no-build --configuration Release

#    - name: Run WolverineTests project
#      run: dotnet test WolverineTests/WolverineTests.csproj --no-build --configuration Release

  # FR3: Version Management
  update-versions:
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
    - name: Check api key
      run: |
        if [ -z "${{ secrets.REPOSITORY_TOKEN }}" ]; then
        echo "Error: REPOSITORY_TOKEN secret is not set."
        exit 1
        else
        echo "REPOSITORY_TOKEN is set."
        fi
  
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPOSITORY_TOKEN }}
        fetch-depth: 0

    - name: Update CleanResult package version
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" CleanResult/CleanResult.csproj
        echo "Updated CleanResult version to $VERSION"

    - name: Update CleanResult.WolverineFx package version and dependency
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" CleanResult.WolverineFx/CleanResult.WolverineFx.csproj
        sed -i "s/<PackageReference Include=\"CleanResult\" Version=\"[^\"]*\"[[:space:]]*\/>/<PackageReference Include=\"CleanResult\" Version=\"$VERSION\"\/>/" CleanResult.WolverineFx/CleanResult.WolverineFx.csproj
        echo "Updated CleanResult.WolverineFx version and dependency to $VERSION"

    - name: Update CleanResult.Swashbuckle package version and dependency
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" CleanResult.Swashbuckle/CleanResult.Swashbuckle.csproj
        sed -i "s/<PackageReference Include=\"CleanResult\" Version=\"[^\"]*\"[[:space:]]*\/>/<PackageReference Include=\"CleanResult\" Version=\"$VERSION\"\/>/" CleanResult.Swashbuckle/CleanResult.Swashbuckle.csproj
        echo "Updated CleanResult.Swashbuckle version and dependency to $VERSION"
    
    - name: Update CleanResult.AspNet package version and dependency
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" CleanResult.AspNet/CleanResult.AspNet.csproj
        sed -i "s/<PackageReference Include=\"CleanResult\" Version=\"[^\"]*\"[[:space:]]*\/>/<PackageReference Include=\"CleanResult\" Version=\"$VERSION\"\/>/" CleanResult.AspNet/CleanResult.AspNet.csproj
        echo "Updated CleanResult.AspNet version and dependency to $VERSION"

    - name: Commit version updates
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CleanResult/CleanResult.csproj CleanResult.WolverineFx/CleanResult.WolverineFx.csproj CleanResult.Swashbuckle/CleanResult.Swashbuckle.csproj CleanResult.AspNet/CleanResult.AspNet.csproj
        
        # Only commit if there are changes
        if ! git diff --cached --quiet; then
          git commit -m "chore: update package versions to $VERSION"
        else
          echo "No changes to commit"
        fi

    - name: Push version updates to repository
      run: |
        # Force push to handle potential conflicts from reruns
        git push -f origin HEAD:refs/heads/release/${{ github.ref_name }}

  # FR4: Build and Packaging
  build-and-pack:
    runs-on: ubuntu-latest
    needs: [validate, update-versions]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: release/${{ github.ref_name }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Build and pack CleanResult first
      run: |
        dotnet restore CleanResult/CleanResult.csproj
        dotnet build CleanResult/CleanResult.csproj --configuration Release --no-restore
        dotnet pack CleanResult/CleanResult.csproj --configuration Release --no-build --output ./local-packages

    - name: Add local package source
      run: |
        LOCAL_PACKAGES_PATH=$(pwd)/local-packages
        dotnet nuget add source $LOCAL_PACKAGES_PATH --name local

    - name: Restore dependencies for dependent projects
      run: dotnet restore CleanResult.sln

    - name: Build solution after version updates
      run: dotnet build CleanResult.sln --configuration Release --no-restore

    - name: Pack all packages
      run: |
        mkdir -p ./nupkg
        cp ./local-packages/*.nupkg ./nupkg/
        dotnet pack CleanResult.WolverineFx/CleanResult.WolverineFx.csproj --configuration Release --no-build --output ./nupkg
        dotnet pack CleanResult.Swashbuckle/CleanResult.Swashbuckle.csproj --configuration Release --no-build --output ./nupkg
        dotnet pack CleanResult.AspNet/CleanResult.AspNet.csproj --configuration Release --no-build --output ./nupkg

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkg/*.nupkg

  # FR5: Publishing
  publish:
    runs-on: ubuntu-latest
    needs: [validate, build-and-pack]
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkg

    - name: Publish packages to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push ./nupkg/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY --skip-duplicate

  # FR6: Release Management
  create-release:
    runs-on: ubuntu-latest
    needs: [validate, publish]
    
    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
      with:
        tag_name: ${{ needs.validate.outputs.tag }}
        release_name: Release ${{ needs.validate.outputs.tag }}
        body: |
          ## CleanResult ${{ needs.validate.outputs.version }}
          
          This release includes the following NuGet packages:
          - CleanResult v${{ needs.validate.outputs.version }}
          - CleanResult.WolverineFx v${{ needs.validate.outputs.version }}
          - CleanResult.Swashbuckle v${{ needs.validate.outputs.version }}
          - CleanResult.AspNet v${{ needs.validate.outputs.version }}
          
          All packages have been published to NuGet.org and are available for download.
        draft: false
        prerelease: false

  # FR7: Cleanup and Branch Management
  cleanup:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPOSITORY_TOKEN }}
        fetch-depth: 0

    - name: Merge release branch to master
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Switch to master and pull latest
        git checkout master
        git pull origin master
        
        # Merge the release branch
        git merge origin/release/${{ github.ref_name }} --no-ff -m "chore: merge release/${{ github.ref_name }} into master"
        
        # Push the merge
        git push origin master

    - name: Delete release branch
      run: |
        # Delete the remote release branch
        git push origin --delete release/${{ github.ref_name }}